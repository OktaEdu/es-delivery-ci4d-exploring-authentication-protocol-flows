{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "#2 - Lab 3.2 Test Web SSO",
  "steps": [
    {
      "title": "Lab Overview",
      "description": "## Lab 3.2 Test Web SSO\n\nüéØ Objective: Now that we have deployed authentication on two applications assigned to the Customers group, we can test out web SSO.\n\n‚è±Ô∏è Duration: 10 min\n\n‚ö†Ô∏è Prerequisites: Labs 1.4, 2.4, and 3.1"
    },
    {
      "title": "Copy Redirect Applications",
      "description": "## Copy Redirect Applications \n\n In order to have working copies of the apps we previously configured (Redirect Model of deploying authentication) in our portal, we'll need to copy them to this workspace. This will be necessary to see how Web SSO works between our two Customer applications (Rewards and Polling).\n \nClick [here](command:codetour.sendTextToTerminal?[\"mkdir redirect; cp ../02-customizing-okta-hosted-siw/redirect/* redirect\"]) to copy the `redirect` directory to this workspace."
    },
    {
      "title": "Log Out of Okta",
      "description": "## Log out of Okta\n\nIf you are still logged in on your Okta org, log out."
    },
    {
      "title": "Start the Web Server",
      "description": "## Start the Web Server\n\n1. [Click here to toggle open the Integrated terminal](command:workbench.action.terminal.toggleTerminal) here in VSCode.\n\n2. Notice that the terminal automatically opens to the project directory.\n\n3. You can start a web server on port 8080 by issuing the following command in this terminal:\n\n ```bash\n python -m http.server 8080\n ```\n\nIf you don't want to type this in manually, you can alternatively [click here](command:codetour.sendTextToTerminal?[\" python -m http.server 8080\"]) to issue the command automatically.\n\nOnce the web server is successfully launched, you'll see the following message in the terminal: `Serving HTTP on :: port 8080 (http://[::]:8080/) ...`\n"
    },
    {
      "title": "Test the Polling App",
      "description": "## Test the Polling App\n\n1. In Chrome, visit http://localhost:8080\n\n2. Click the `Polling App (Embedded Widget)` link. If you don't see this link, refresh your browser.\n\n3. Notice that you are not redirected to Okta for authentication. Instead, the Sign-In Widget loads on the page of your website.\n\n4. Log in as `soraya.esfeh@oktaice.com`/`Tra!nme4321`\n\nYou should now see the ID Token (which is formatted as a JSON web token or **JWT**) value and its claims, including:\n\n- `sub` (subject of the JWT): Soraya's Okta UserId\n- `name`: Soraya's name\n- `email`: Soraya's email address\n- `ver`: Okta API version\n- `iss` (issuer of the JWT): The URL of your Okta Authorization server\n- `aud` (audience): Your app's Client Id\n- `iat` (issued at time): Time the JWT was issued. Expressed in Unix time.\n- `exp` (expiration time): Time the JWT expires. Expressed in Unix time.\n- `jti` (JWT ID): Unique identifier used to prevent the JWT from being replayed"
    },
    {
      "title": "Test the Rewards App",
      "description": "## Test the Rewards App\n\n1. Click on `Return to Portal`\n\n2. Click the `Rewards App (Redirect)` link.\n\n3. Notice that you are not prompted to authenticate again as you have an existing session, so an ID Token is issued.\n\nYou should see the ID Token value and its claims. Much of this content is the same as you saw on the Polling App. However, notice that the `jti` (JWT ID) and the `aud` (audience) are different. You should now see that the `aud` is this Client ID of the Rewards app."
    },
    {
      "title": "Lab Checkpoint",
      "description": "## ‚úÖ Checkpoint\n\nAt this point, you have seen how web SSO works between two applications accessible to members of the Customer group.\n\n## üéâ End of Module 3 Labs\n**You may close this workspace project, ensuring all changes were saved.**"
    }
  ]
}